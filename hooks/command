#!/bin/bash
set -euo pipefail

DIR="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"

# shellcheck disable=SC1090,SC1091
. "$DIR/../lib/shared.bash"

job_image_name="$(plugin_read_config VM_NAME)-${BUILDKITE_JOB_ID}"

##########################
# FUSE compatability logic
# This is compat logic to handle when Veertu's FUSE driver is not installed (if we want to mount a volume)
if [[ $(plugin_read_config NO_VOLUME false) == false ]]; then
  echo "--- :anka: Detecting FUSE compatability"
  # shellcheck disable=SC2086
  if plugin_prompt_and_run anka run --no-volume "$job_image_name" kextstat | grep "com.veertu.filesystems.vtufs" &>/dev/null; then
    echo "Veertu FUSE driver detected. Will mount volume into ${job_image_name}."
  else
    echo "Veertu FUSE driver NOT detected."
    echo "Copying repo files from $(plugin_read_config VOLUME .) to ${job_image_name}:$(plugin_read_config WORKDIR /private/var/tmp/ankafs.0). (This may take awhile depending on the size)"
    plugin_prompt_and_run anka $ANKA_DEBUG cp -a "$(plugin_read_config VOLUME .)" "${job_image_name}:$(plugin_read_config WORKDIR /private/var/tmp/ankafs.0)"
  fi
  
  # Manually assign the workdir to be the ankafs to ensure consistent workdir between FUSE and non-FUSE VMs
  # shellcheck disable=SC2034
  BUILDKITE_PLUGIN_ANKA_WORKDIR="$(plugin_read_config WORKDIR /private/var/tmp/ankafs.0)"
fi

# Ensure the (user-specified) workdir exists (we ignore our default value for the purposes of this logic)
# shellcheck disable=SC2086,SC2154,SC2091
if [[ -n $(plugin_read_config WORKDIR) ]] && [[ $(plugin_read_config WORKDIR_CREATE false) == true ]]; then
  echo "--- :anka: Ensuring $(plugin_read_config WORKDIR) exists"
  # shellcheck disable=SC2086
  plugin_prompt_and_run anka $ANKA_DEBUG run "$job_image_name" mkdir -p "$(plugin_read_config WORKDIR)"
fi

#######################################
# Parse out all the run command options
run_args=()

# Mount host directory (current directory by default)
if [[ -n $(plugin_read_config VOLUME) ]]; then
  run_args+=("--volume" "$(plugin_read_config VOLUME)")
fi

# Prevent the mounting of the host directory
# shellcheck disable=SC2091
if $(plugin_read_config NO_VOLUME false); then
  run_args+=("--no-volume")
fi

# Inherit environment variables from host
# shellcheck disable=SC2091
if $(plugin_read_config INHERIT_ENVIRONMENT_VARS false) ; then
  run_args+=("--env")
fi

# Provide an environment variable file
if [[ -n $(plugin_read_config ENVIRONMENT_FILE) ]] ; then
  run_args+=("--env-file" "$(plugin_read_config ENVIRONMENT_FILE)")
fi

# Wait to start processing until network can be established
# shellcheck disable=SC2091
if $(plugin_read_config WAIT_NETWORK false); then
  run_args+=("--wait-network")
fi

# Wait to start processing until time is updated
# shellcheck disable=SC2091
if $(plugin_read_config WAIT_TIME false); then
  run_args+=("--wait-time")
fi

# Add the workdir if specified
# shellcheck disable=SC2091
if [[ -n $(plugin_read_config WORKDIR) ]]; then
  run_args+=("--workdir" "$(plugin_read_config WORKDIR)")
fi

run_args+=("$job_image_name")

###############################################################
# Obtain options to pass to bash command on the end of anka run
bash_ops=()

# Run bash with -i for interactive (anka run defaults to this off)
# shellcheck disable=SC2091
if $(plugin_read_config BASH_INTERACTIVE false); then
  bash_ops+=("-i")
fi
bash_ops+=("-c") # Needed, don't remove or move

##########
# ANKA RUN
commands=()
while IFS='' read -r line; do commands+=("${PRE_EXECUTE_SLEEP}${PRE_EXECUTE_PING_SLEEP}$line"); done <<< "$BUILDKITE_COMMAND"
for command in "${commands[@]:-}"; do
  echo "+++ Executing $command in $job_image_name"
  # shellcheck disable=SC2086
  plugin_prompt_and_run anka $ANKA_DEBUG run "${run_args[@]:+${run_args[@]}}" bash "${bash_ops[@]:+${bash_ops[@]}}" "$command"
done

